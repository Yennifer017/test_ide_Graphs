
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi1.testphone;

import java_cup.runtime.*;
import java.util.*;
import java.util.HashMap;
import compi1.testphone.models.*;
import compi1.testphone.statements.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\270\000\002\002\004\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\101\003" +
    "\000\002\101\003\000\002\110\003\000\002\110\003\000" +
    "\002\103\003\000\002\103\003\000\002\111\003\000\002" +
    "\111\003\000\002\105\003\000\002\105\003\000\002\104" +
    "\003\000\002\104\003\000\002\107\003\000\002\107\003" +
    "\000\002\107\003\000\002\107\003\000\002\102\003\000" +
    "\002\102\003\000\002\106\003\000\002\106\003\000\002" +
    "\075\003\000\002\075\005\000\002\075\005\000\002\075" +
    "\005\000\002\075\005\000\002\075\003\000\002\075\005" +
    "\000\002\075\005\000\002\075\005\000\002\075\005\000" +
    "\002\002\004\000\002\002\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\004\004\000\002\004" +
    "\002\000\002\005\006\000\002\006\004\000\002\007\005" +
    "\000\002\007\002\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\011\000\002\010\011\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\011" +
    "\005\000\002\012\004\000\002\013\005\000\002\013\002" +
    "\000\002\070\005\000\002\014\007\000\002\015\003\000" +
    "\002\015\003\000\002\016\004\000\002\016\002\000\002" +
    "\017\004\000\002\017\002\000\002\020\007\000\002\021" +
    "\004\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\023\005\000\002\023\002\000" +
    "\002\024\006\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\026\005\000\002\026\002\000\002\027\006" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\004\000\002\032\006\000\002" +
    "\032\002\000\002\033\013\000\002\034\006\000\002\034" +
    "\002\000\002\035\004\000\002\036\006\000\002\036\002" +
    "\000\002\037\013\000\002\040\006\000\002\040\002\000" +
    "\002\041\004\000\002\042\006\000\002\042\002\000\002" +
    "\043\013\000\002\044\005\000\002\044\002\000\002\045" +
    "\005\000\002\045\005\000\002\046\004\000\002\047\005" +
    "\000\002\047\002\000\002\062\016\000\002\050\005\000" +
    "\002\050\002\000\002\061\014\000\002\060\006\000\002" +
    "\060\002\000\002\051\005\000\002\051\002\000\002\052" +
    "\005\000\002\052\005\000\002\053\004\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\063\004\000\002\063\004\000\002\063\002\000\002" +
    "\071\004\000\002\071\004\000\002\071\004\000\002\071" +
    "\005\000\002\071\005\000\002\071\005\000\002\071\005" +
    "\000\002\076\004\000\002\077\003\000\002\077\005\000" +
    "\002\077\005\000\002\077\005\000\002\077\005\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\005\000\002\077\005\000\002\077\005\000\002\077\005" +
    "\000\002\074\005\000\002\074\005\000\002\074\005\000" +
    "\002\074\005\000\002\074\005\000\002\074\005\000\002" +
    "\074\005\000\002\074\005\000\002\074\005\000\002\074" +
    "\005\000\002\074\005\000\002\074\005\000\002\074\005" +
    "\000\002\074\005\000\002\074\005\000\002\074\005\000" +
    "\002\074\005\000\002\074\005\000\002\074\005\000\002" +
    "\074\005\000\002\074\005\000\002\074\005\000\002\054" +
    "\004\000\002\065\011\000\002\064\006\000\002\064\002" +
    "\000\002\055\006\000\002\066\012\000\002\072\004\000" +
    "\002\072\002\000\002\073\003\000\002\073\002\000\002" +
    "\056\006\000\002\067\006\000\002\057\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\036\004\015\006\036\007\011\010\020\011" +
    "\022\012\021\013\004\014\030\015\024\016\040\017\013" +
    "\020\031\043\023\077\014\001\002\000\004\045\u018b\001" +
    "\002\000\042\002\uffdc\004\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\043\uffdc\044\uffdc\077\uffdc\001\002\000\042" +
    "\002\uffda\004\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\043\uffda\044\uffda\077\uffda\001\002\000\042\002\uff86\004" +
    "\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86" +
    "\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86\043\uff86\044" +
    "\uff86\077\uff86\001\002\000\042\002\uff85\004\uff85\006\uff85" +
    "\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85\015" +
    "\uff85\016\uff85\017\uff85\020\uff85\043\uff85\044\uff85\077\uff85" +
    "\001\002\000\004\052\u0188\001\002\000\004\043\u0185\001" +
    "\002\000\004\045\u0183\001\002\000\020\054\052\061\u0178" +
    "\062\u017a\063\u017d\064\u017c\065\u017e\066\u017b\001\002\000" +
    "\004\052\u0172\001\002\000\042\002\uffdb\004\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\043\uffdb\044\uffdb\077\uffdb" +
    "\001\002\000\042\002\uff84\004\uff84\006\uff84\007\uff84\010" +
    "\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84" +
    "\017\uff84\020\uff84\043\uff84\044\uff84\077\uff84\001\002\000" +
    "\004\043\u016d\001\002\000\004\045\u016b\001\002\000\004" +
    "\045\u0169\001\002\000\042\004\015\006\036\007\011\010" +
    "\020\011\022\012\021\013\004\014\030\015\024\016\040" +
    "\017\013\020\031\022\uffc2\026\212\043\211\077\014\001" +
    "\002\000\004\045\u0160\001\002\000\040\002\uffd8\004\015" +
    "\006\036\007\011\010\020\011\022\012\021\013\004\014" +
    "\030\015\024\016\040\017\013\020\031\043\211\077\014" +
    "\001\002\000\044\002\uff53\004\uff53\005\u0159\006\uff53\007" +
    "\uff53\010\uff53\011\uff53\012\uff53\013\uff53\014\uff53\015\uff53" +
    "\016\uff53\017\uff53\020\uff53\043\uff53\044\uff53\077\uff53\001" +
    "\002\000\044\002\uffd4\004\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\043\uffd4\044\uffd4\050\u0154\077\uffd4\001\002" +
    "\000\004\045\u014e\001\002\000\004\045\u014c\001\002\000" +
    "\004\043\205\001\002\000\004\002\204\001\002\000\042" +
    "\002\uff87\004\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012" +
    "\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87" +
    "\043\uff87\044\uff87\077\uff87\001\002\000\004\002\uffdd\001" +
    "\002\000\004\052\046\001\002\000\004\051\045\001\002" +
    "\000\004\045\041\001\002\000\006\075\042\077\044\001" +
    "\002\000\044\002\uffea\004\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\043\uffea\044\uffea\050\uffea\077\uffea\001\002" +
    "\000\044\002\uffce\004\uffce\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\043\uffce\044\uffce\050\uffce\077\uffce\001\002\000" +
    "\044\002\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\043\uffe9\044\uffe9\050\uffe9\077\uffe9\001\002\000\042" +
    "\002\uff88\004\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012" +
    "\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88" +
    "\043\uff88\044\uff88\077\uff88\001\002\000\006\051\uff4f\077" +
    "\050\001\002\000\004\051\120\001\002\000\004\054\052" +
    "\001\002\000\004\051\uff50\001\002\000\034\075\070\076" +
    "\061\077\054\100\060\101\071\102\055\103\066\104\057" +
    "\105\063\106\073\107\064\110\062\111\065\001\002\000" +
    "\014\043\uff79\044\uff79\051\uff79\053\uff79\077\uff79\001\002" +
    "\000\024\043\uff71\044\uff71\051\uff71\053\uff71\055\113\056" +
    "\110\057\112\060\111\077\uff71\001\002\000\056\002\000" +
    "\004\000\006\000\007\000\010\000\011\000\012\000\013" +
    "\000\014\000\015\000\016\000\017\000\020\000\043\000" +
    "\044\000\047\000\050\000\051\000\053\000\067\000\070" +
    "\000\077\000\001\002\000\024\043\uff78\044\uff78\051\uff78" +
    "\053\uff78\055\101\056\076\057\100\060\077\077\uff78\001" +
    "\002\000\056\002\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\043\ufffe\044\ufffe\047\ufffe\050\ufffe\051\ufffe" +
    "\053\ufffe\067\ufffe\070\ufffe\077\ufffe\001\002\000\056\002" +
    "\ufffc\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\043" +
    "\ufffc\044\ufffc\047\ufffc\050\ufffc\051\ufffc\053\ufffc\067\ufffc" +
    "\070\ufffc\077\ufffc\001\002\000\056\002\ufff0\004\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\043\ufff0\044\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\053\ufff0\067\ufff0\070\ufff0\077\ufff0" +
    "\001\002\000\020\043\ufffa\044\ufffa\051\ufffa\053\ufffa\067" +
    "\ufffa\070\ufffa\077\ufffa\001\002\000\056\002\ufffd\004\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\043\ufffd\044\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\053\ufffd\067\ufffd\070\ufffd\077" +
    "\ufffd\001\002\000\042\043\ufff5\044\ufff5\050\ufff5\051\ufff5" +
    "\053\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\067\ufff5\070" +
    "\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\077\ufff5\001\002" +
    "\000\020\043\ufff9\044\ufff9\051\ufff9\053\ufff9\067\ufff9\070" +
    "\ufff9\077\ufff9\001\002\000\056\002\uffff\004\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015" +
    "\uffff\016\uffff\017\uffff\020\uffff\043\uffff\044\uffff\047\uffff" +
    "\050\uffff\051\uffff\053\uffff\067\uffff\070\uffff\077\uffff\001" +
    "\002\000\056\002\uffef\004\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\043\uffef\044\uffef\047\uffef\050\uffef\051\uffef" +
    "\053\uffef\067\uffef\070\uffef\077\uffef\001\002\000\056\002" +
    "\uffed\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\043" +
    "\uffed\044\uffed\047\uffed\050\uffed\051\uffed\053\uffed\067\uffed" +
    "\070\uffed\077\uffed\001\002\000\056\002\ufffb\004\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\043\ufffb\044\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\053\ufffb\067\ufffb\070\ufffb\077\ufffb" +
    "\001\002\000\056\002\uffee\004\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\043\uffee\044\uffee\047\uffee\050\uffee\051" +
    "\uffee\053\uffee\067\uffee\070\uffee\077\uffee\001\002\000\042" +
    "\043\ufff6\044\ufff6\050\ufff6\051\ufff6\053\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\060\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6" +
    "\073\ufff6\074\ufff6\077\ufff6\001\002\000\014\043\uff72\044" +
    "\uff72\051\uff72\053\uff72\077\uff72\001\002\000\014\043\uff73" +
    "\044\uff73\051\uff73\053\uff73\077\uff73\001\002\000\010\077" +
    "\104\106\073\107\064\001\002\000\010\077\104\106\073" +
    "\107\064\001\002\000\010\077\104\106\073\107\064\001" +
    "\002\000\010\077\104\106\073\107\064\001\002\000\014" +
    "\043\uff74\044\uff74\051\uff74\053\uff74\077\uff74\001\002\000" +
    "\016\043\ufff4\044\ufff4\050\ufff4\051\ufff4\053\ufff4\077\ufff4" +
    "\001\002\000\016\043\ufff3\044\ufff3\050\ufff3\051\ufff3\053" +
    "\ufff3\077\ufff3\001\002\000\014\043\uff75\044\uff75\051\uff75" +
    "\053\uff75\077\uff75\001\002\000\014\043\uff76\044\uff76\051" +
    "\uff76\053\uff76\077\uff76\001\002\000\014\043\uff77\044\uff77" +
    "\051\uff77\053\uff77\077\uff77\001\002\000\010\077\104\106" +
    "\073\107\064\001\002\000\010\077\104\106\073\107\064" +
    "\001\002\000\010\077\104\106\073\107\064\001\002\000" +
    "\010\077\104\106\073\107\064\001\002\000\014\043\uff6d" +
    "\044\uff6d\051\uff6d\053\uff6d\077\uff6d\001\002\000\014\043" +
    "\uff6e\044\uff6e\051\uff6e\053\uff6e\077\uff6e\001\002\000\014" +
    "\043\uff6f\044\uff6f\051\uff6f\053\uff6f\077\uff6f\001\002\000" +
    "\014\043\uff70\044\uff70\051\uff70\053\uff70\077\uff70\001\002" +
    "\000\034\075\070\076\061\077\121\100\060\101\071\102" +
    "\055\103\066\104\057\105\063\106\073\107\064\110\062" +
    "\111\065\001\002\000\016\067\163\070\164\071\167\072" +
    "\162\073\166\074\165\001\002\000\016\067\147\070\150" +
    "\071\153\072\146\073\151\074\152\001\002\000\004\051" +
    "\142\001\002\000\006\067\134\070\135\001\002\000\006" +
    "\067\126\070\127\001\002\000\024\075\070\076\061\077" +
    "\130\100\060\101\071\102\055\103\066\104\057\105\063" +
    "\001\002\000\024\075\070\076\061\077\130\100\060\101" +
    "\071\102\055\103\066\104\057\105\063\001\002\000\052" +
    "\002\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\043\uffeb\044\uffeb\047\uffeb\050\uffeb\051\uffeb\053\uffeb\077" +
    "\uffeb\001\002\000\006\051\uff69\053\uff69\001\002\000\052" +
    "\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\043\uffec\044\uffec\047\uffec\050\uffec\051\uffec\053\uffec\077" +
    "\uffec\001\002\000\006\051\uff6a\053\uff6a\001\002\000\010" +
    "\077\137\110\062\111\065\001\002\000\010\077\137\110" +
    "\062\111\065\001\002\000\006\051\ufff8\053\ufff8\001\002" +
    "\000\006\051\ufff7\053\ufff7\001\002\000\006\051\uff6b\053" +
    "\uff6b\001\002\000\006\051\uff6c\053\uff6c\001\002\000\006" +
    "\053\uff4d\077\014\001\002\000\004\053\145\001\002\000" +
    "\004\053\uff4e\001\002\000\004\043\uff51\001\002\000\010" +
    "\077\104\106\073\107\064\001\002\000\010\077\104\106" +
    "\073\107\064\001\002\000\010\077\104\106\073\107\064" +
    "\001\002\000\010\077\104\106\073\107\064\001\002\000" +
    "\010\077\104\106\073\107\064\001\002\000\010\077\104" +
    "\106\073\107\064\001\002\000\006\051\uff66\053\uff66\001" +
    "\002\000\006\051\uff63\053\uff63\001\002\000\006\051\uff64" +
    "\053\uff64\001\002\000\006\051\uff67\053\uff67\001\002\000" +
    "\006\051\uff68\053\uff68\001\002\000\006\051\uff65\053\uff65" +
    "\001\002\000\010\077\104\106\073\107\064\001\002\000" +
    "\034\075\070\076\061\077\177\100\060\101\071\102\055" +
    "\103\066\104\057\105\063\106\073\107\064\110\062\111" +
    "\065\001\002\000\034\075\070\076\061\077\173\100\060" +
    "\101\071\102\055\103\066\104\057\105\063\106\073\107" +
    "\064\110\062\111\065\001\002\000\010\077\104\106\073" +
    "\107\064\001\002\000\010\077\104\106\073\107\064\001" +
    "\002\000\010\077\104\106\073\107\064\001\002\000\006" +
    "\051\uff5a\053\uff5a\001\002\000\006\051\uff58\053\uff58\001" +
    "\002\000\006\051\uff57\053\uff57\001\002\000\006\051\uff5c" +
    "\053\uff5c\001\002\000\006\051\uff5d\053\uff5d\001\002\000" +
    "\006\051\uff5b\053\uff5b\001\002\000\006\051\uff5e\053\uff5e" +
    "\001\002\000\006\051\uff60\053\uff60\001\002\000\006\051" +
    "\uff61\053\uff61\001\002\000\006\051\uff5f\053\uff5f\001\002" +
    "\000\006\051\uff62\053\uff62\001\002\000\006\051\uff59\053" +
    "\uff59\001\002\000\004\002\001\001\002\000\010\043\211" +
    "\044\uff81\077\014\001\002\000\010\043\211\044\uff81\077" +
    "\014\001\002\000\004\044\u014a\001\002\000\010\043\211" +
    "\044\uff81\077\014\001\002\000\006\022\uffc2\026\212\001" +
    "\002\000\004\045\u0134\001\002\000\004\050\u0133\001\002" +
    "\000\004\022\217\001\002\000\004\044\216\001\002\000" +
    "\042\002\uffc7\004\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\043\uffc7\044\uffc7\077\uffc7\001\002\000\004\045\220" +
    "\001\002\000\006\043\225\046\224\001\002\000\006\044" +
    "\uffc0\050\u0130\001\002\000\006\044\uffc5\050\uffc5\001\002" +
    "\000\006\044\uffc4\050\uffc4\001\002\000\004\043\300\001" +
    "\002\000\016\012\230\024\233\025\231\031\232\040\234" +
    "\041\226\001\002\000\004\045\276\001\002\000\006\044" +
    "\uffaf\050\271\001\002\000\004\045\267\001\002\000\004" +
    "\045\265\001\002\000\004\045\263\001\002\000\004\045" +
    "\237\001\002\000\004\045\235\001\002\000\024\075\070" +
    "\076\061\077\130\100\060\101\071\102\055\103\066\104" +
    "\057\105\063\001\002\000\006\044\uffb3\050\uffb3\001\002" +
    "\000\010\077\242\106\073\107\064\001\002\000\016\044" +
    "\uffe8\050\uffe8\055\256\056\253\057\255\060\254\001\002" +
    "\000\006\044\uffb6\050\uffb6\001\002\000\016\044\uffe3\050" +
    "\uffe3\055\246\056\243\057\245\060\244\001\002\000\010" +
    "\077\104\106\073\107\064\001\002\000\010\077\104\106" +
    "\073\107\064\001\002\000\010\077\104\106\073\107\064" +
    "\001\002\000\010\077\104\106\073\107\064\001\002\000" +
    "\006\044\uffdf\050\uffdf\001\002\000\006\044\uffe0\050\uffe0" +
    "\001\002\000\006\044\uffe1\050\uffe1\001\002\000\006\044" +
    "\uffe2\050\uffe2\001\002\000\010\077\104\106\073\107\064" +
    "\001\002\000\010\077\104\106\073\107\064\001\002\000" +
    "\010\077\104\106\073\107\064\001\002\000\010\077\104" +
    "\106\073\107\064\001\002\000\006\044\uffe4\050\uffe4\001" +
    "\002\000\006\044\uffe5\050\uffe5\001\002\000\006\044\uffe6" +
    "\050\uffe6\001\002\000\006\044\uffe7\050\uffe7\001\002\000" +
    "\024\075\070\076\061\077\130\100\060\101\071\102\055" +
    "\103\066\104\057\105\063\001\002\000\006\044\uffb5\050" +
    "\uffb5\001\002\000\006\075\042\077\044\001\002\000\006" +
    "\044\uffb2\050\uffb2\001\002\000\024\075\070\076\061\077" +
    "\130\100\060\101\071\102\055\103\066\104\057\105\063" +
    "\001\002\000\006\044\uffb4\050\uffb4\001\002\000\016\012" +
    "\230\024\233\025\231\031\232\040\234\041\226\001\002" +
    "\000\004\044\273\001\002\000\006\044\uffb7\050\uffb7\001" +
    "\002\000\006\044\uffaf\050\271\001\002\000\004\044\uffb0" +
    "\001\002\000\024\075\070\076\061\077\130\100\060\101" +
    "\071\102\055\103\066\104\057\105\063\001\002\000\006" +
    "\044\uffb1\050\uffb1\001\002\000\012\023\307\031\314\033" +
    "\303\035\315\001\002\000\006\047\uff93\050\u012c\001\002" +
    "\000\004\047\uffad\001\002\000\004\045\u011b\001\002\000" +
    "\004\047\u011a\001\002\000\006\047\uffa7\050\u0115\001\002" +
    "\000\004\047\uffac\001\002\000\004\045\u0109\001\002\000" +
    "\004\047\uffaa\001\002\000\004\047\uffab\001\002\000\006" +
    "\047\uffa1\050\u0104\001\002\000\006\047\uff9b\050\377\001" +
    "\002\000\004\045\363\001\002\000\004\045\316\001\002" +
    "\000\024\075\070\076\061\077\130\100\060\101\071\102" +
    "\055\103\066\104\057\105\063\001\002\000\004\050\320" +
    "\001\002\000\004\036\321\001\002\000\004\045\322\001" +
    "\002\000\004\046\323\001\002\000\004\043\325\001\002" +
    "\000\006\047\uff90\050\343\001\002\000\004\033\326\001" +
    "\002\000\004\045\327\001\002\000\010\077\242\106\073" +
    "\107\064\001\002\000\004\050\331\001\002\000\004\034" +
    "\332\001\002\000\004\045\333\001\002\000\010\077\242" +
    "\106\073\107\064\001\002\000\006\044\uff8d\050\335\001" +
    "\002\000\004\031\340\001\002\000\004\044\337\001\002" +
    "\000\006\047\uff8f\050\uff8f\001\002\000\004\045\341\001" +
    "\002\000\024\075\070\076\061\077\130\100\060\101\071" +
    "\102\055\103\066\104\057\105\063\001\002\000\004\044" +
    "\uff8e\001\002\000\004\043\325\001\002\000\004\047\345" +
    "\001\002\000\006\044\uff8b\050\347\001\002\000\004\044" +
    "\360\001\002\000\006\025\351\037\350\001\002\000\004" +
    "\045\356\001\002\000\004\045\354\001\002\000\006\044" +
    "\uff8b\050\347\001\002\000\004\044\uff8c\001\002\000\006" +
    "\075\042\077\044\001\002\000\006\044\uff8a\050\uff8a\001" +
    "\002\000\006\100\060\101\071\001\002\000\006\044\uff89" +
    "\050\uff89\001\002\000\006\047\uff92\050\uff92\001\002\000" +
    "\006\047\uff90\050\343\001\002\000\004\047\uff91\001\002" +
    "\000\024\075\070\076\061\077\130\100\060\101\071\102" +
    "\055\103\066\104\057\105\063\001\002\000\004\050\365" +
    "\001\002\000\004\024\366\001\002\000\004\045\367\001" +
    "\002\000\010\077\242\106\073\107\064\001\002\000\006" +
    "\044\uff9e\050\371\001\002\000\004\025\374\001\002\000" +
    "\004\044\373\001\002\000\006\047\uffa0\050\uffa0\001\002" +
    "\000\004\045\375\001\002\000\006\075\042\077\044\001" +
    "\002\000\004\044\uff9f\001\002\000\004\043\u0101\001\002" +
    "\000\004\047\uff9d\001\002\000\004\033\303\001\002\000" +
    "\006\047\uff9b\050\377\001\002\000\004\047\uff9c\001\002" +
    "\000\004\043\u0106\001\002\000\004\047\uffa3\001\002\000" +
    "\004\031\314\001\002\000\006\047\uffa1\050\u0104\001\002" +
    "\000\004\047\uffa2\001\002\000\024\075\070\076\061\077" +
    "\130\100\060\101\071\102\055\103\066\104\057\105\063" +
    "\001\002\000\004\050\u010b\001\002\000\004\024\u010c\001" +
    "\002\000\004\045\u010d\001\002\000\010\077\242\106\073" +
    "\107\064\001\002\000\006\044\uffa4\050\u010f\001\002\000" +
    "\004\025\u0112\001\002\000\004\044\u0111\001\002\000\006" +
    "\047\uffa6\050\uffa6\001\002\000\004\045\u0113\001\002\000" +
    "\006\075\042\077\044\001\002\000\004\044\uffa5\001\002" +
    "\000\004\043\u0117\001\002\000\004\047\uffa9\001\002\000" +
    "\004\023\307\001\002\000\006\047\uffa7\050\u0115\001\002" +
    "\000\004\047\uffa8\001\002\000\006\044\uffae\050\uffae\001" +
    "\002\000\010\077\242\106\073\107\064\001\002\000\004" +
    "\050\u011d\001\002\000\004\034\u011e\001\002\000\004\045" +
    "\u011f\001\002\000\010\077\242\106\073\107\064\001\002" +
    "\000\006\044\uff98\050\u0121\001\002\000\006\025\u0124\042" +
    "\u0125\001\002\000\004\044\u0123\001\002\000\006\047\uff9a" +
    "\050\uff9a\001\002\000\004\045\u012a\001\002\000\004\045" +
    "\u0128\001\002\000\006\044\uff98\050\u0121\001\002\000\004" +
    "\044\uff99\001\002\000\010\077\242\106\073\107\064\001" +
    "\002\000\006\044\uff97\050\uff97\001\002\000\006\075\042" +
    "\077\044\001\002\000\006\044\uff96\050\uff96\001\002\000" +
    "\004\043\u012e\001\002\000\004\047\uff95\001\002\000\004" +
    "\035\315\001\002\000\004\047\uff94\001\002\000\004\026" +
    "\212\001\002\000\004\044\uffc6\001\002\000\004\044\uffc1" +
    "\001\002\000\004\022\uffc3\001\002\000\004\043\u0135\001" +
    "\002\000\012\011\u013b\027\u0139\030\u013a\032\u0138\001\002" +
    "\000\004\044\u0148\001\002\000\006\044\uffb8\050\u0144\001" +
    "\002\000\004\045\u0142\001\002\000\004\045\u0140\001\002" +
    "\000\004\045\u013e\001\002\000\004\045\u013c\001\002\000" +
    "\024\075\070\076\061\077\130\100\060\101\071\102\055" +
    "\103\066\104\057\105\063\001\002\000\006\044\uffbd\050" +
    "\uffbd\001\002\000\024\075\070\076\061\077\130\100\060" +
    "\101\071\102\055\103\066\104\057\105\063\001\002\000" +
    "\006\044\uffbb\050\uffbb\001\002\000\024\075\070\076\061" +
    "\077\130\100\060\101\071\102\055\103\066\104\057\105" +
    "\063\001\002\000\006\044\uffbc\050\uffbc\001\002\000\012" +
    "\102\055\103\066\104\057\105\063\001\002\000\006\044" +
    "\uffba\050\uffba\001\002\000\012\011\u013b\027\u0139\030\u013a" +
    "\032\u0138\001\002\000\004\044\uffbe\001\002\000\006\044" +
    "\uffb8\050\u0144\001\002\000\004\044\uffb9\001\002\000\006" +
    "\044\uffbf\050\uffbf\001\002\000\004\044\uff82\001\002\000" +
    "\042\002\uff52\004\uff52\006\uff52\007\uff52\010\uff52\011\uff52" +
    "\012\uff52\013\uff52\014\uff52\015\uff52\016\uff52\017\uff52\020" +
    "\uff52\043\uff52\044\uff52\077\uff52\001\002\000\004\044\uff83" +
    "\001\002\000\024\075\070\076\061\077\130\100\060\101" +
    "\071\102\055\103\066\104\057\105\063\001\002\000\044" +
    "\002\uffcc\004\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\043\uffcc\044\uffcc\050\uffcc\077\uffcc\001\002\000\004\043" +
    "\u014f\001\002\000\004\011\u0150\001\002\000\004\045\u0151" +
    "\001\002\000\024\075\070\076\061\077\130\100\060\101" +
    "\071\102\055\103\066\104\057\105\063\001\002\000\004" +
    "\044\u0153\001\002\000\044\002\uffd0\004\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\043\uffd0\044\uffd0\050\uffd0\077" +
    "\uffd0\001\002\000\022\011\022\012\021\013\004\014\030" +
    "\015\024\016\040\017\013\020\031\001\002\000\042\002" +
    "\uffd6\004\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\043" +
    "\uffd6\044\uffd6\077\uffd6\001\002\000\044\002\uffd4\004\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\043\uffd4\044\uffd4" +
    "\050\u0154\077\uffd4\001\002\000\042\002\uffd5\004\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\043\uffd5\044\uffd5\077" +
    "\uffd5\001\002\000\042\002\uff56\004\uff56\006\uff56\007\uff56" +
    "\010\uff56\011\uff56\012\uff56\013\uff56\014\uff56\015\uff56\016" +
    "\uff56\017\uff56\020\uff56\043\uff56\044\uff56\077\uff56\001\002" +
    "\000\004\043\u015a\001\002\000\010\043\211\044\uff81\077" +
    "\014\001\002\000\004\044\u015c\001\002\000\042\002\uff54" +
    "\004\uff54\006\uff54\007\uff54\010\uff54\011\uff54\012\uff54\013" +
    "\uff54\014\uff54\015\uff54\016\uff54\017\uff54\020\uff54\043\uff54" +
    "\044\uff54\077\uff54\001\002\000\004\002\uffde\001\002\000" +
    "\042\002\uffd8\004\015\006\036\007\011\010\020\011\022" +
    "\012\021\013\004\014\030\015\024\016\040\017\013\020" +
    "\031\043\211\044\uffd8\077\014\001\002\000\006\002\uffd9" +
    "\044\uffd9\001\002\000\004\043\u0161\001\002\000\004\021" +
    "\u0162\001\002\000\004\045\u0163\001\002\000\024\075\070" +
    "\076\061\077\130\100\060\101\071\102\055\103\066\104" +
    "\057\105\063\001\002\000\004\044\u0165\001\002\000\044" +
    "\002\uffcf\004\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\043\uffcf\044\uffcf\050\uffcf\077\uffcf\001\002\000\040\004" +
    "\015\006\036\007\011\010\020\011\022\012\021\013\004" +
    "\014\030\015\024\016\040\017\013\020\031\043\211\044" +
    "\uffd8\077\014\001\002\000\004\044\u0168\001\002\000\004" +
    "\002\uffd7\001\002\000\024\075\070\076\061\077\130\100" +
    "\060\101\071\102\055\103\066\104\057\105\063\001\002" +
    "\000\044\002\uffd3\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\043\uffd3\044\uffd3\050\uffd3\077\uffd3\001\002\000" +
    "\024\075\070\076\061\077\130\100\060\101\071\102\055" +
    "\103\066\104\057\105\063\001\002\000\044\002\uffd2\004" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\043\uffd2\044" +
    "\uffd2\050\uffd2\077\uffd2\001\002\000\010\043\211\044\uff81" +
    "\077\014\001\002\000\004\044\u016f\001\002\000\004\007" +
    "\011\001\002\000\004\051\u0171\001\002\000\042\002\uff4a" +
    "\004\uff4a\006\uff4a\007\uff4a\010\uff4a\011\uff4a\012\uff4a\013" +
    "\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020\uff4a\043\uff4a" +
    "\044\uff4a\077\uff4a\001\002\000\034\075\070\076\061\077" +
    "\121\100\060\101\071\102\055\103\066\104\057\105\063" +
    "\106\073\107\064\110\062\111\065\001\002\000\004\053" +
    "\u0174\001\002\000\004\043\u0175\001\002\000\010\043\211" +
    "\044\uff81\077\014\001\002\000\004\044\u0177\001\002\000" +
    "\044\002\uff55\004\uff55\005\uff55\006\uff55\007\uff55\010\uff55" +
    "\011\uff55\012\uff55\013\uff55\014\uff55\015\uff55\016\uff55\017" +
    "\uff55\020\uff55\043\uff55\044\uff55\077\uff55\001\002\000\014" +
    "\043\uff7f\044\uff7f\051\uff7f\053\uff7f\077\uff7f\001\002\000" +
    "\014\043\uff80\044\uff80\051\uff80\053\uff80\077\uff80\001\002" +
    "\000\014\043\uff7e\044\uff7e\051\uff7e\053\uff7e\077\uff7e\001" +
    "\002\000\010\077\104\106\073\107\064\001\002\000\010" +
    "\077\104\106\073\107\064\001\002\000\010\077\104\106" +
    "\073\107\064\001\002\000\010\077\104\106\073\107\064" +
    "\001\002\000\014\043\uff7b\044\uff7b\051\uff7b\053\uff7b\077" +
    "\uff7b\001\002\000\014\043\uff7d\044\uff7d\051\uff7d\053\uff7d" +
    "\077\uff7d\001\002\000\014\043\uff7c\044\uff7c\051\uff7c\053" +
    "\uff7c\077\uff7c\001\002\000\014\043\uff7a\044\uff7a\051\uff7a" +
    "\053\uff7a\077\uff7a\001\002\000\024\075\070\076\061\077" +
    "\130\100\060\101\071\102\055\103\066\104\057\105\063" +
    "\001\002\000\044\002\uffcd\004\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\043\uffcd\044\uffcd\050\uffcd\077\uffcd\001" +
    "\002\000\010\043\211\044\uff81\077\014\001\002\000\004" +
    "\044\u0187\001\002\000\042\002\uff4c\004\uff4c\006\uff4c\007" +
    "\uff4c\010\uff4c\011\uff4c\012\uff4c\013\uff4c\014\uff4c\015\uff4c" +
    "\016\uff4c\017\uff4c\020\uff4c\043\uff4c\044\uff4c\077\uff4c\001" +
    "\002\000\034\075\070\076\061\077\121\100\060\101\071" +
    "\102\055\103\066\104\057\105\063\106\073\107\064\110" +
    "\062\111\065\001\002\000\004\053\u018a\001\002\000\006" +
    "\043\uff4b\051\uff4b\001\002\000\004\046\u018d\001\002\000" +
    "\044\002\uffd1\004\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\043\uffd1\044\uffd1\050\uffd1\077\uffd1\001\002\000\024" +
    "\075\070\076\061\077\130\100\060\101\071\102\055\103" +
    "\066\104\057\105\063\001\002\000\006\047\uffc8\050\u0191" +
    "\001\002\000\004\047\u0190\001\002\000\044\002\uffcb\004" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\043\uffcb\044" +
    "\uffcb\050\uffcb\077\uffcb\001\002\000\024\075\070\076\061" +
    "\077\130\100\060\101\071\102\055\103\066\104\057\105" +
    "\063\001\002\000\004\047\uffca\001\002\000\006\047\uffc8" +
    "\050\u0191\001\002\000\004\047\uffc9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\040\002\032\003\024\005\034\006\004\010" +
    "\026\053\005\054\033\055\006\056\007\057\016\065\025" +
    "\066\031\067\011\070\015\071\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\u0178\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\u0165\006\004" +
    "\010\026\014\214\016\213\020\212\053\005\054\033\055" +
    "\006\056\007\057\016\065\025\066\031\067\011\070\015" +
    "\071\036\001\001\000\002\001\001\000\036\003\u015d\004" +
    "\u015c\006\004\010\026\053\005\054\033\055\006\056\007" +
    "\057\016\065\025\066\031\067\011\070\015\071\036\001" +
    "\001\000\004\064\u0157\001\001\000\004\007\u0154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\046\001\001\000" +
    "\002\001\001\000\004\076\050\001\001\000\002\001\001" +
    "\000\016\077\052\100\066\101\071\107\074\110\073\111" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\105\106\111\102\001\001\000\006\105\105" +
    "\111\102\001\001\000\006\105\104\111\102\001\001\000" +
    "\006\105\101\111\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\105\116\111\102\001\001" +
    "\000\006\105\115\111\102\001\001\000\006\105\114\111" +
    "\102\001\001\000\006\105\113\111\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\074\122\100\066\101\071\107\124\110\123" +
    "\111\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\100\066\101\071\102\132\107\131\001\001\000\012\100" +
    "\066\101\071\102\130\107\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\103\140\110\135\001\001\000\006\103\137\110\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\071\143\073\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\105\160\111\102\001\001\000\006\105\157\111\102" +
    "\001\001\000\006\105\156\111\102\001\001\000\006\105" +
    "\155\111\102\001\001\000\006\105\154\111\102\001\001" +
    "\000\006\105\153\111\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\105\202\111\102\001" +
    "\001\000\014\100\066\101\071\107\201\110\200\111\177" +
    "\001\001\000\014\100\066\101\071\107\175\110\174\111" +
    "\173\001\001\000\006\105\171\111\102\001\001\000\006" +
    "\105\170\111\102\001\001\000\006\105\167\111\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\063\206\070\205\071\207\001\001\000\010" +
    "\063\u014a\070\205\071\207\001\001\000\002\001\001\000" +
    "\010\063\u0148\070\205\071\207\001\001\000\010\014\214" +
    "\016\213\020\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\220\024\222\027\221\001" +
    "\001\000\004\017\u0130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\226\001\001\000" +
    "\002\001\001\000\004\026\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\100\066\101\071\102\235\107\131" +
    "\001\001\000\002\001\001\000\006\075\240\111\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\105\251\111\102\001\001\000\006\105\250\111" +
    "\102\001\001\000\006\105\247\111\102\001\001\000\006" +
    "\105\246\111\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\105\261" +
    "\111\102\001\001\000\006\105\260\111\102\001\001\000" +
    "\006\105\257\111\102\001\001\000\006\105\256\111\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\100\066\101\071\102\263" +
    "\107\131\001\001\000\002\001\001\000\004\106\265\001" +
    "\001\000\002\001\001\000\012\100\066\101\071\102\267" +
    "\107\131\001\001\000\002\001\001\000\004\025\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\274" +
    "\001\001\000\002\001\001\000\012\100\066\101\071\102" +
    "\276\107\131\001\001\000\002\001\001\000\024\030\303" +
    "\031\301\033\304\035\305\037\311\041\310\043\312\046" +
    "\307\062\300\001\001\000\004\047\u012c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u0104\001\001\000" +
    "\004\042\377\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\100\066\101\071\102\316\107\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\323\001\001\000\004\050\343\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\075\327" +
    "\111\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\075\333\111\237\001\001\000\004" +
    "\060\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\100\066\101\071" +
    "\102\341\107\131\001\001\000\002\001\001\000\004\061" +
    "\360\001\001\000\002\001\001\000\004\051\345\001\001" +
    "\000\002\001\001\000\004\052\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\352\001\001\000\002" +
    "\001\001\000\004\106\354\001\001\000\002\001\001\000" +
    "\004\101\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\361\001\001\000\002\001\001\000\012\100" +
    "\066\101\071\102\363\107\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\075\367\111" +
    "\237\001\001\000\004\040\371\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\375\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\u0101\001\001\000\004\042" +
    "\u0102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\u0106\001\001\000\004\036\u0107\001" +
    "\001\000\002\001\001\000\012\100\066\101\071\102\u0109" +
    "\107\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\075\u010d\111\237\001\001\000\004" +
    "\034\u010f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\106\u0113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\u0117\001\001\000\004\032\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\075\u011b\111\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\075\u011f\111\237\001\001\000\004\044\u0121\001" +
    "\001\000\004\045\u0125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\u0126\001\001\000\002\001\001\000\006\075\u0128\111\237" +
    "\001\001\000\002\001\001\000\004\106\u012a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u012e\001\001\000\002\001\001\000\004\020\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\u0135\022\u0136\001\001\000" +
    "\002\001\001\000\004\023\u0144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\100\066\101\071\102\u013c\107\131\001\001\000\002" +
    "\001\001\000\012\100\066\101\071\102\u013e\107\131\001" +
    "\001\000\002\001\001\000\012\100\066\101\071\102\u0140" +
    "\107\131\001\001\000\002\001\001\000\004\100\u0142\001" +
    "\001\000\002\001\001\000\004\022\u0145\001\001\000\002" +
    "\001\001\000\004\023\u0146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\100\066\101\071\102\u014c\107\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\100\066\101\071\102\u0151\107" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u0155\001\001\000\002\001\001\000\004\007\u0156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\063\u015a\070\205\071\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u015d" +
    "\004\u015e\006\004\010\026\053\005\054\033\055\006\056" +
    "\007\057\016\065\025\066\031\067\011\070\015\071\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\100\066\101\071\102\u0163" +
    "\107\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\u015d\004\u0166\006\004\010\026\053\005\054\033" +
    "\055\006\056\007\057\016\065\025\066\031\067\011\070" +
    "\015\071\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\100\066\101\071\102\u0169\107\131\001\001\000" +
    "\002\001\001\000\012\100\066\101\071\102\u016b\107\131" +
    "\001\001\000\002\001\001\000\010\063\u016d\070\205\071" +
    "\207\001\001\000\002\001\001\000\004\067\u016f\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\074\u0172\100" +
    "\066\101\071\107\124\110\123\111\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\063\u0175\070\205\071" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\105" +
    "\u0181\111\102\001\001\000\006\105\u0180\111\102\001\001" +
    "\000\006\105\u017f\111\102\001\001\000\006\105\u017e\111" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\100\066\101\071\102" +
    "\u0183\107\131\001\001\000\002\001\001\000\010\063\u0185" +
    "\070\205\071\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\074\u0188\100\066\101\071\107\124\110\123" +
    "\111\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u018b\001\001\000\002\001\001\000\014\012\u018e" +
    "\100\066\101\071\102\u018d\107\131\001\001\000\004\013" +
    "\u0191\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\100\066\101\071\102\u0192\107\131\001\001\000\002\001" +
    "\001\000\004\013\u0193\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private List<String> semanticErrors;
    private Project project;

    private Executable executable;
    private List<Executable> executablesList;
    private List<Point> pointsList;
    private Leyenda leyenda;
    private DataLineas dataLineas;
    private ChartLineas chartLineas;


    //conect the parser with the lexer
    public parser(Lexer lex){
        super(lex);
        syntaxErrors = new LinkedList<>();
        semanticErrors = new LinkedList<>();
        project = new Project();

        leyenda = new Leyenda();
        executablesList = new ArrayList<>();
        pointsList = new ArrayList<>();
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }

    public List<String> getSemanticErrors(){
        return this.semanticErrors;
    }

    public Project getProject(){
        return this.project;
    }

    /*----------------------------------------------------
                        UTIL METHODS
    ------------------------------------------------------*/
    private InformationTarget getInformationTarget(){
        if(executable == null){
            executable = new InformationTarget();
        }
        return (InformationTarget) executable;
    }

    private Symbol symbol(int left, int right, Object value, int type){
        return new Symbol(type, left, right, value);
    }


    /*----------------------------------------------------
                        METODOS DE ERROR
    ------------------------------------------------------*/
    private final String NO_VAR_FOUND = "No se ha definido la variable";
    private final String INCORRECT_TYPE_VAR = "El valor de la variable no pudo ser convertida al tipo adecuado";

    public void syntax_error(Symbol cur_token) {
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym)
                    + ", linea: " + cur_token.left
                    + ", columna: " + cur_token.right
                    + ", lexema: " + cur_token.value;
        if (expected_token_ids().isEmpty()) {
            mss += " -- ya no se esperaba ningun simbolo";
        }
        syntaxErrors.add(mss);
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }

    public void report_error(String message, Object info){
        Symbol cur_token = (Symbol) info;
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym)
                    + ", linea: " + cur_token.left
                    + ", columna: " + cur_token.right
                    + ", lexema: " + cur_token.value
                    + ", Info: " + message;
        syntaxErrors.add(mss);
    }

    private void addSemanticError(int left, int right, Object value, String message){
        semanticErrors.add(message + "-" + "linea:" + left + " columna:" + right + "-" + " Lexema=" + value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruction EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // align_specification ::= BOTTOM 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("align_specification",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // align_specification ::= TOP 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("align_specification",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // align_specification ::= RIGHT 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("align_specification",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // align_specification ::= LEFT 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("align_specification",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lines_style_attr ::= DASHED_LINE 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lines_style_attr",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lines_style_attr ::= SOLID_LINE 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lines_style_attr",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pure_boolean_data ::= TRUE_B 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.TRUE_B); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_boolean_data",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pure_boolean_data ::= FALSE_B 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.TRUE_B); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_boolean_data",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // boolean_data ::= pure_boolean_data 
            {
              Symbol RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol b = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_data",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // boolean_data ::= VARIABLE 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.VARIABLE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_data",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pure_numeric_data ::= INTEGER 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.INTEGER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_numeric_data",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pure_numeric_data ::= FLOAT 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float v = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.FLOAT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_numeric_data",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // numeric_data ::= pure_numeric_data 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_data",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // numeric_data ::= VARIABLE 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.VARIABLE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_data",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // numeric_integer_data ::= INTEGER 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.INTEGER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_integer_data",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numeric_integer_data ::= VARIABLE 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.VARIABLE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_integer_data",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // pure_string_data ::= STRING 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_string_data",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // pure_string_data ::= align_specification 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_string_data",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // pure_string_data ::= lines_style_attr 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_string_data",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // pure_string_data ::= HEX_COLOR 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.HEX_COLOR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_string_data",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // string_data ::= pure_string_data 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_data",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // string_data ::= VARIABLE 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.VARIABLE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_data",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // color_data ::= HEX_COLOR 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.HEX_COLOR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_data",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // color_data ::= VARIABLE 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=symbol(vleft, vright, v, sym.VARIABLE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_data",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // numeric_operable_data ::= pure_numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(v);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_operable_data",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // numeric_operable_data ::= pure_numeric_data PLUS numeric_data 
            {
              MutableValue RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol n1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(n1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.PLUS));
                mutable.getSymbols().add(n2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_operable_data",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // numeric_operable_data ::= pure_numeric_data MINUS numeric_data 
            {
              MutableValue RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol n1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(n1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.MINUS));
                mutable.getSymbols().add(n2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_operable_data",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // numeric_operable_data ::= pure_numeric_data DIV numeric_data 
            {
              MutableValue RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol n1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(n1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.DIV));
                mutable.getSymbols().add(n2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_operable_data",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // numeric_operable_data ::= pure_numeric_data TIMES numeric_data 
            {
              MutableValue RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol n1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(n1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.TIMES));
                mutable.getSymbols().add(n2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_operable_data",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // numeric_operable_data ::= VARIABLE 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_operable_data",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // numeric_operable_data ::= VARIABLE PLUS numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.PLUS));
                mutable.getSymbols().add(n);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_operable_data",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numeric_operable_data ::= VARIABLE MINUS numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.MINUS));
                mutable.getSymbols().add(n);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_operable_data",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // numeric_operable_data ::= VARIABLE DIV numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.DIV));
                mutable.getSymbols().add(n);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_operable_data",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // numeric_operable_data ::= VARIABLE TIMES numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.TIMES));
                mutable.getSymbols().add(n);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_operable_data",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruction ::= code_inst more_code 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruction ::= with_llaves 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // code_inst ::= global_specification 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // code_inst ::= chart_creation 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Executable e = (Executable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(e != null){ //save data
                    project.getData().add(e);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // code_inst ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // more_code ::= code_inst more_code 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_code",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // more_code ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_code",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // with_llaves ::= LLAVE_L code_inst more_code LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_llaves",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // global_specification ::= global_single_specification more_global_specifications 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_specification",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // more_global_specifications ::= COMA global_single_specification more_global_specifications 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_global_specifications",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // more_global_specifications ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_global_specifications",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // global_single_specification ::= TITLE TWO_DOTS string_data 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		project.setTitle(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // global_single_specification ::= DESCRIPTION TWO_DOTS string_data 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		project.setDescription(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // global_single_specification ::= KEYWORDS TWO_DOTS keywords_specification 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // global_single_specification ::= HEADER TWO_DOTS LLAVE_L TITLE TWO_DOTS string_data LLAVE_R 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		project.setHeader(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // global_single_specification ::= FOOTER TWO_DOTS LLAVE_L COPYRIGHT TWO_DOTS string_data LLAVE_R 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		project.setFooter(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // global_single_specification ::= BACKGROUND TWO_DOTS color_data 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		project.setBackgroundColor(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // global_single_specification ::= FONT_FAMILY TWO_DOTS string_data 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		project.setFontFamilyS(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // global_single_specification ::= FONT_SIZE TWO_DOTS string_data 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		project.setFontSizeS(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // keywords_specification ::= CORCHETE_L keywords_names CORCHETE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keywords_specification",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // keywords_names ::= string_data more_key_words 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		project.getKeyWords().add(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keywords_names",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // more_key_words ::= COMA string_data more_key_words 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		project.getKeyWords().add(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_key_words",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // more_key_words ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_key_words",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // chart_creation ::= LLAVE_L elements_chart LLAVE_R 
            {
              Executable RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                if(executable != null){ //save data
                    if(executable instanceof DataContainer){
                        DataContainer dataContainer = (DataContainer) executable;
                        dataContainer.setLeyenda(leyenda);
                    } else if (executable instanceof InformationTarget){
                        InformationTarget infoT = (InformationTarget) executable;
                        infoT.setLine(lright);
                        infoT.setColumn(lleft);
                    }
                    RESULT = executable;
                    executable = null;
                    leyenda = new Leyenda();
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chart_creation",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // elements_chart ::= leyend_chart_op DATA TWO_DOTS specification_data leyend_chart_op_f 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elements_chart",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // specification_data ::= data_chart 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification_data",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // specification_data ::= information_target 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification_data",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // leyend_chart_op ::= leyend_chart COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leyend_chart_op",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // leyend_chart_op ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leyend_chart_op",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // leyend_chart_op_f ::= COMA leyend_chart 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leyend_chart_op_f",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // leyend_chart_op_f ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leyend_chart_op_f",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // leyend_chart ::= CHART TWO_DOTS LLAVE_L specifications_leyend LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leyend_chart",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // specifications_leyend ::= specification more_specifications 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specifications_leyend",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // specification ::= TITLE TWO_DOTS string_data 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 leyenda.setTitle(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // specification ::= X_AXIS_L TWO_DOTS string_data 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 leyenda.setXAxisLabel(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // specification ::= Y_AXIS_L TWO_DOTS string_data 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 leyenda.setYAxisLabel(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // specification ::= LEGEND_POS TWO_DOTS align_specification 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 leyenda.setLegendPosition(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // more_specifications ::= COMA specification more_specifications 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_specifications",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // more_specifications ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_specifications",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // information_target ::= LLAVE_L data_target more_data_target LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("information_target",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // data_target ::= VALUE TWO_DOTS numeric_operable_data 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MutableValue n = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        InformationTarget infoT = getInformationTarget();
                                                        infoT.setValue(n);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_target",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // data_target ::= LABEL TWO_DOTS string_data 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        InformationTarget infoT = getInformationTarget();
                                                        infoT.setLabel(s);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_target",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // data_target ::= DESCRIPTION TWO_DOTS string_data 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        InformationTarget infoT = getInformationTarget();
                                                        infoT.setDescription(s);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_target",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // data_target ::= ICON TWO_DOTS string_data 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        InformationTarget infoT = getInformationTarget();
                                                        infoT.setIcon(s);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_target",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // data_target ::= COLOR TWO_DOTS color_data 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        InformationTarget infoT = getInformationTarget();
                                                        infoT.setColor(c);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_target",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // data_target ::= LINK TWO_DOTS string_data 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        InformationTarget infoT = getInformationTarget();
                                                        infoT.setLink(l);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_target",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // more_data_target ::= COMA data_target more_data_target 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_data_target",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // more_data_target ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_data_target",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // data_chart ::= CORCHETE_L LLAVE_L specific_chart_data CORCHETE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_chart",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // specific_chart_data ::= chart_barras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specific_chart_data",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // specific_chart_data ::= chart_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specific_chart_data",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // specific_chart_data ::= chart_points 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specific_chart_data",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // specific_chart_data ::= chart_lines 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specific_chart_data",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // chart_barras ::= value_chart_barras more_values_barras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chart_barras",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // more_values_barras ::= COMA LLAVE_L value_chart_barras more_values_barras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_barras",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // more_values_barras ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_barras",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // value_chart_barras ::= CATEGORY TWO_DOTS string_data COMA VALUE TWO_DOTS numeric_operable_data optional_color_b LLAVE_R 
            {
              Object RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Symbol sc = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MutableValue n = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    if(executable == null){
                        executable = new ChartBarras();
                        ChartBarras chart = (ChartBarras) executable;
                        DataBarras data = new DataBarras();
                        data.setCategory(sc);
                        data.setValue(n);
                        chart.getDataBarras().add(data);
                    } else {
                        ChartBarras chart = (ChartBarras) executable;
                        if(chart.getDataBarras().get(chart.getDataBarras().size()-1).getCategory() == null){
                            //cuando ya esta inicializada
                            chart.getDataBarras().get(chart.getDataBarras().size()-1).setCategory(sc);
                            chart.getDataBarras().get(chart.getDataBarras().size()-1).setValue(n);
                        } else {
                            DataBarras data = new DataBarras();
                            data.setCategory(sc);
                            data.setValue(n);
                            chart.getDataBarras().add(data);
                        }
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_chart_barras",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // optional_color_b ::= COMA COLOR TWO_DOTS color_data 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    try{
                        if(executable == null){
                            executable = new ChartBarras();
                        }
                        ChartBarras chart = (ChartBarras) executable;
                        DataBarras data = new DataBarras();
                        data.setColor(c);
                        chart.getDataBarras().add(data);
                    } catch(NullPointerException | ClassCastException | IndexOutOfBoundsException e){
                        addSemanticError(cleft, cright, c, e.toString());
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_color_b",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // optional_color_b ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_color_b",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // chart_pie ::= value_chart_pie more_values_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chart_pie",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // more_values_pie ::= COMA LLAVE_L value_chart_pie more_values_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_pie",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // more_values_pie ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_pie",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // value_chart_pie ::= LABEL TWO_DOTS string_data COMA VALUE TWO_DOTS numeric_operable_data optional_color_pie LLAVE_R 
            {
              Object RESULT =null;
		int lableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int labright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object lab = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MutableValue n = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    try{
                        if(executable == null){
                            executable = new ChartPastel();
                            ChartPastel chart = (ChartPastel) executable;
                            DataPastel data = new DataPastel();
                            data.setLabel(l);
                            data.setValue(n);
                            chart.getDataPastel().add(data);
                        } else {
                            ChartPastel chart = (ChartPastel) executable;
                            if(chart.getDataPastel().get(chart.getDataPastel().size()-1).getLabel() == null){
                                //cuando ya esta inicializada
                                chart.getDataPastel().get(chart.getDataPastel().size()-1).setLabel(l);
                                chart.getDataPastel().get(chart.getDataPastel().size()-1).setValue(n);
                            } else {
                                DataPastel data = new DataPastel();
                                data.setLabel(l);
                                data.setValue(n);
                                chart.getDataPastel().add(data);
                            }
                        }
                    } catch(NullPointerException | ClassCastException | IndexOutOfBoundsException e){
                        addSemanticError(lableft, labright, lab, e.toString());
                    }    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_chart_pie",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // optional_color_pie ::= COMA COLOR TWO_DOTS color_data 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    try{
                        if(executable == null){
                            executable = new ChartPastel();
                        }
                        ChartPastel chart = (ChartPastel) executable;
                        DataPastel data = new DataPastel();
                        data.setColor(c);
                        chart.getDataPastel().add(data);
                    } catch(NullPointerException | ClassCastException | IndexOutOfBoundsException e){
                        addSemanticError(cleft, cright, c, e.toString());
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_color_pie",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // optional_color_pie ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_color_pie",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // chart_points ::= value_chart_points more_values_points 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chart_points",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // more_values_points ::= COMA LLAVE_L value_chart_points more_values_points 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_points",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // more_values_points ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_points",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // value_chart_points ::= X_DATA TWO_DOTS numeric_operable_data COMA Y_DATA TWO_DOTS numeric_operable_data optional_point_c_data LLAVE_R 
            {
              Object RESULT =null;
		int infleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int infright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object inf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		MutableValue x = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MutableValue y = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    try{
                        if(executable == null){
                            executable = new ChartPuntos();
                            ChartPuntos chart = (ChartPuntos) executable;
                            DataPuntos data = new DataPuntos();
                            data.setXData(x);
                            data.setYData(y);
                            data.setSaved(true);
                            chart.getDataPuntos().add(data);
                        } else {
                            ChartPuntos chart = (ChartPuntos) executable;
                            if(!chart.getDataPuntos().get(chart.getDataPuntos().size()-1).isSaved()){
                                //cuando ya esta inicializada
                                chart.getDataPuntos().get(chart.getDataPuntos().size()-1).setXData(x);
                                chart.getDataPuntos().get(chart.getDataPuntos().size()-1).setYData(y);
                                chart.getDataPuntos().get(chart.getDataPuntos().size()-1).setSaved(true);
                            } else {
                                DataPuntos data = new DataPuntos();
                                data.setXData(x);
                                data.setYData(y);
                                data.setSaved(true);
                                chart.getDataPuntos().add(data);
                            }
                        }
                    } catch(NullPointerException | ClassCastException | IndexOutOfBoundsException e){
                        addSemanticError(infleft, infright, inf, e.toString());
                    }

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_chart_points",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // optional_point_c_data ::= COMA options_pointc optional_point_c_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_point_c_data",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // optional_point_c_data ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_point_c_data",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // options_pointc ::= SIZE TWO_DOTS numeric_operable_data 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MutableValue n = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    try{
                        if(executable == null){
                            executable = new ChartPuntos();
                            ChartPuntos chart = (ChartPuntos) executable;
                            DataPuntos data = new DataPuntos();
                            data.setSize(n);
                            chart.getDataPuntos().add(data);
                        } else {
                            ChartPuntos chart = (ChartPuntos) executable;
                            if(!chart.getDataPuntos().get(chart.getDataPuntos().size() - 1).isSaved()){
                                //ya se creo la dada, agregando
                                chart.getDataPuntos().get(chart.getDataPuntos().size() - 1).setSize(n);    
                            } else {
                                //se debe inicializar una nueva data
                                DataPuntos data = new DataPuntos();
                                data.setSize(n);
                                chart.getDataPuntos().add(data);
                            }
                        }
                    } catch(NullPointerException | ClassCastException | IndexOutOfBoundsException e){
                        addSemanticError(sleft, sright, s, e.toString());
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("options_pointc",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // options_pointc ::= COLOR TWO_DOTS color_data 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    try{
                        if(executable == null){
                            executable = new ChartPuntos();
                            ChartPuntos chart = (ChartPuntos) executable;
                            DataPuntos data = new DataPuntos();
                            data.setColor(c);
                            chart.getDataPuntos().add(data);
                        } else {
                            ChartPuntos chart = (ChartPuntos) executable;
                            if(!chart.getDataPuntos().get(chart.getDataPuntos().size() - 1).isSaved()){
                                //ya se creo la data, agregando
                                chart.getDataPuntos().get(chart.getDataPuntos().size() - 1).setColor(c);    
                            } else {
                                //se debe inicializar una nueva data
                                DataPuntos data = new DataPuntos();
                                data.setColor(c);
                                chart.getDataPuntos().add(data);
                            }
                        }
                    } catch(NullPointerException | ClassCastException | IndexOutOfBoundsException e){
                        addSemanticError(csleft, csright, cs, e.toString());
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("options_pointc",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // chart_lines ::= value_chart_lines more_values_lines 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataLineas d = (DataLineas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(chartLineas == null){
                    chartLineas = new ChartLineas();
                }
                chartLineas.getDataLineas().add(0,d);
                executable = chartLineas;
                chartLineas = null;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chart_lines",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // more_values_lines ::= COMA LLAVE_L value_chart_lines 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataLineas d = (DataLineas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(chartLineas == null){
                    chartLineas = new ChartLineas();
                }
                chartLineas.getDataLineas().add(0, d);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_lines",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // more_values_lines ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_lines",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // value_chart_lines ::= NAME TWO_DOTS string_data COMA POINTS TWO_DOTS CORCHETE_L specific_data_line more_specific_data_line CORCHETE_R optional_values_lines LLAVE_R 
            {
              DataLineas RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Point p = (Point)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            if(dataLineas == null){
                dataLineas = new DataLineas();
            }
            dataLineas.setName(n);
            pointsList.add(0, p);
            dataLineas.setPoints(pointsList);
            pointsList = new ArrayList<>();
            RESULT = dataLineas;
            dataLineas = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_chart_lines",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // more_specific_data_line ::= COMA specific_data_line more_specific_data_line 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Point p = (Point)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                pointsList.add(0, p);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_specific_data_line",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // more_specific_data_line ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_specific_data_line",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // specific_data_line ::= LLAVE_L X_DATA TWO_DOTS numeric_operable_data COMA Y_DATA TWO_DOTS numeric_operable_data optional_data_lines LLAVE_R 
            {
              Point RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		MutableValue x = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MutableValue y = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pointleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pointright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Point point = (Point)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(point == null){
                    point = new Point();
                }
                point.setXData(x);
                point.setYData(y);
                RESULT = point;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specific_data_line",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // optional_data_lines ::= COMA LABEL TWO_DOTS string_data 
            {
              Point RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Point point = new Point();
                point.setLabel(l);
                RESULT = point;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_data_lines",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // optional_data_lines ::= 
            {
              Point RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_data_lines",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // optional_values_lines ::= COMA optional_attribute_linec optional_values_lines 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_values_lines",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // optional_values_lines ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_values_lines",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // optional_attribute_linec ::= COLOR TWO_DOTS color_data 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                try{
                    if(dataLineas == null){
                        dataLineas = new DataLineas();
                    }
                    dataLineas.setColor(c);
                } catch(NullPointerException | ClassCastException | IndexOutOfBoundsException e){
                    addSemanticError(csleft, csright, cs, e.toString());
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_attribute_linec",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // optional_attribute_linec ::= LINE_STYLE TWO_DOTS lines_style_attr 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                try{
                    if(dataLineas == null){
                        dataLineas = new DataLineas();
                    }
                    dataLineas.setColor(s);
                } catch(NullPointerException | ClassCastException | IndexOutOfBoundsException e){
                    addSemanticError(csleft, csright, cs, e.toString());
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_attribute_linec",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // statement ::= variable_statement DOT_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignation a = (Asignation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                project.getData().add(a);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // statement ::= if_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // statement ::= for_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // statement ::= while_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // statement ::= do_while_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // internal_block ::= chart_creation internal_block 
            {
              List<Executable> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Executable e = (Executable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if(e != null){ //save data
                //guardar en la lista
                executablesList.add(0, e);
            }
            RESULT=executablesList;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("internal_block",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // internal_block ::= variable_statement internal_block 
            {
              List<Executable> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignation v = (Asignation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            //add the executable to the list
            executablesList.add(0, v);
             RESULT=executablesList;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("internal_block",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // internal_block ::= 
            {
              List<Executable> RESULT =null;
		
             RESULT=executablesList;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("internal_block",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // variable_statement ::= VARIABLE asignation 
            {
              Asignation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MutableValue a = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Asignation asign = new Asignation();
            asign.setVariable(symbol(vleft, vright, v, sym.VARIABLE));
            asign.setValue(a);
            RESULT = asign;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // variable_statement ::= VARIABLE PLUS_PLUS 
            {
              Asignation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Asignation asign = new Asignation();
            asign.setVariable(symbol(vleft, vright, v, sym.VARIABLE));
            MutableValue value = new MutableValue();
            value.getSymbols().add(symbol(oleft, oright, o, sym.PLUS_PLUS));
            asign.setValue(value);
            RESULT = asign;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // variable_statement ::= VARIABLE MINUS_MINUS 
            {
              Asignation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Asignation asign = new Asignation();
            asign.setVariable(symbol(vleft, vright, v, sym.VARIABLE));
            MutableValue value = new MutableValue();
            value.getSymbols().add(symbol(oleft, oright, o, sym.MINUS_MINUS));
            asign.setValue(value);
            RESULT = asign;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // variable_statement ::= VARIABLE PLUS_EQUALS numeric_data 
            {
              Asignation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Asignation asign = new Asignation();
            asign.setVariable(symbol(vleft, vright, v, sym.VARIABLE));
            MutableValue value = new MutableValue();
            value.getSymbols().add(symbol(oleft, oright, o, sym.PLUS_EQUALS));
            value.getSymbols().add(n);
            asign.setValue(value);
            RESULT = asign;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // variable_statement ::= VARIABLE MINUS_EQUALS numeric_data 
            {
              Asignation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Asignation asign = new Asignation();
            asign.setVariable(symbol(vleft, vright, v, sym.VARIABLE));
            MutableValue value = new MutableValue();
            value.getSymbols().add(symbol(oleft, oright, o, sym.MINUS_EQUALS));
            value.getSymbols().add(n);
            asign.setValue(value);
            RESULT = asign;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // variable_statement ::= VARIABLE TIMES_EQUALS numeric_data 
            {
              Asignation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Asignation asign = new Asignation();
            asign.setVariable(symbol(vleft, vright, v, sym.VARIABLE));
            MutableValue value = new MutableValue();
            value.getSymbols().add(symbol(oleft, oright, o, sym.TIMES_EQUALS));
            value.getSymbols().add(n);
            asign.setValue(value);
            RESULT = asign;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // variable_statement ::= VARIABLE DIV_EQUALS numeric_data 
            {
              Asignation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Asignation asign = new Asignation();
            asign.setVariable(symbol(vleft, vright, v, sym.VARIABLE));
            MutableValue value = new MutableValue();
            value.getSymbols().add(symbol(oleft, oright, o, sym.DIV_EQUALS));
            value.getSymbols().add(n);
            asign.setValue(value);
            RESULT = asign;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // asignation ::= ASIGNATOR possible_values 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MutableValue v = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // possible_values ::= pure_numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(v);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // possible_values ::= pure_numeric_data PLUS numeric_data 
            {
              MutableValue RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol n1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(n1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.PLUS));
                mutable.getSymbols().add(n2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // possible_values ::= pure_numeric_data MINUS numeric_data 
            {
              MutableValue RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol n1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(n1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.MINUS));
                mutable.getSymbols().add(n2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // possible_values ::= pure_numeric_data DIV numeric_data 
            {
              MutableValue RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol n1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(n1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.DIV));
                mutable.getSymbols().add(n2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // possible_values ::= pure_numeric_data TIMES numeric_data 
            {
              MutableValue RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol n1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(n1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.TIMES));
                mutable.getSymbols().add(n2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // possible_values ::= pure_string_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(v);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // possible_values ::= pure_boolean_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(v);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // possible_values ::= VARIABLE 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // possible_values ::= VARIABLE PLUS numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.PLUS));
                mutable.getSymbols().add(n);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // possible_values ::= VARIABLE MINUS numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.MINUS));
                mutable.getSymbols().add(n);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // possible_values ::= VARIABLE DIV numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.DIV));
                mutable.getSymbols().add(n);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // possible_values ::= VARIABLE TIMES numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.TIMES));
                mutable.getSymbols().add(n);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // condition ::= pure_boolean_data EQUALS boolean_data 
            {
              MutableValue RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol b1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol b2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(b1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.EQUALS));
                mutable.getSymbols().add(b2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // condition ::= pure_boolean_data DIFFERENT boolean_data 
            {
              MutableValue RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol b1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol b2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(b1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.DIFFERENT));
                mutable.getSymbols().add(b2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // condition ::= pure_string_data EQUALS string_data 
            {
              MutableValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol v1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(v1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.EQUALS));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // condition ::= pure_string_data DIFFERENT string_data 
            {
              MutableValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol v1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(v1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.DIFFERENT));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // condition ::= pure_numeric_data EQUALS numeric_data 
            {
              MutableValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol v1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(v1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.EQUALS));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // condition ::= pure_numeric_data DIFFERENT numeric_data 
            {
              MutableValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol v1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(v1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.DIFFERENT));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // condition ::= pure_numeric_data MAYOR numeric_data 
            {
              MutableValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol v1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(v1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.MAYOR));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // condition ::= pure_numeric_data MAYOR_EQUALS numeric_data 
            {
              MutableValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol v1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(v1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.MAYOR_EQUALS));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // condition ::= pure_numeric_data MENOR numeric_data 
            {
              MutableValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol v1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(v1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.MENOR));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // condition ::= pure_numeric_data MENOR_EQUALS numeric_data 
            {
              MutableValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol v1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(v1);
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.MENOR_EQUALS));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // condition ::= VARIABLE EQUALS pure_string_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.EQUALS));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // condition ::= VARIABLE EQUALS pure_numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.EQUALS));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // condition ::= VARIABLE EQUALS VARIABLE 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.EQUALS));
                mutable.getSymbols().add(symbol(v2left, v2right, v2, sym.VARIABLE));
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // condition ::= VARIABLE EQUALS pure_boolean_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.EQUALS));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // condition ::= VARIABLE DIFFERENT pure_string_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.DIFFERENT));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // condition ::= VARIABLE DIFFERENT pure_numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.DIFFERENT));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // condition ::= VARIABLE DIFFERENT VARIABLE 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.DIFFERENT));
                mutable.getSymbols().add(symbol(v2left, v2right, v2, sym.VARIABLE));
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // condition ::= VARIABLE DIFFERENT pure_boolean_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.DIFFERENT));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // condition ::= VARIABLE MAYOR numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.MAYOR));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // condition ::= VARIABLE MAYOR_EQUALS numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.MAYOR_EQUALS));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // condition ::= VARIABLE MENOR numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.MENOR));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // condition ::= VARIABLE MENOR_EQUALS numeric_data 
            {
              MutableValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol v2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MutableValue mutable = new MutableValue();
                mutable.getSymbols().add(symbol(vleft, vright, v, sym.VARIABLE));
                mutable.getSymbols().add(symbol(oleft, oright, o, sym.MENOR_EQUALS));
                mutable.getSymbols().add(v2);
                RESULT=mutable;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // if_block ::= if_stmt else_block 
            {
              Object RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStmt stm = (IfStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Executable> list = (List<Executable>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                stm.setElseStmt(list);
                project.getData().add(stm);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // if_stmt ::= IF PARENTESIS_L condition PARENTESIS_R LLAVE_L internal_block LLAVE_R 
            {
              IfStmt RESULT =null;
		int mutvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mutvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		MutableValue mutval = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Executable> list = (List<Executable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                IfStmt stmt = new IfStmt();
                stmt.setExecutables(list);
                stmt.setCondition(mutval);
                RESULT = stmt;
                executablesList = new ArrayList();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // else_block ::= ELSE LLAVE_L internal_block LLAVE_R 
            {
              List<Executable> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Executable> list = (List<Executable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = list;
                executablesList = new ArrayList();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // else_block ::= 
            {
              List<Executable> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // for_block ::= for_stmt LLAVE_L internal_block LLAVE_R 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ForStmt stmt = (ForStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Executable> list = (List<Executable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                stmt.setExecutables(list);
                project.getData().add(stmt);
                executablesList = new ArrayList();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // for_stmt ::= FOR PARENTESIS_L variable_definition DOT_COMA condition DOT_COMA optional_increment PARENTESIS_R 
            {
              ForStmt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Asignation d = (Asignation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		MutableValue c = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignation inc = (Asignation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                ForStmt stmt  = new ForStmt();
                stmt.setFirstAsign(d);
                stmt.setIncrement(inc);
                stmt.setCondition(c);
                RESULT = stmt;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // variable_definition ::= VARIABLE asignation 
            {
              Asignation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MutableValue a = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Asignation asign = new Asignation();
                asign.setVariable(symbol(vleft, vright, v, sym.VARIABLE));
                asign.setValue(a);
                RESULT = asign;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_definition",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // variable_definition ::= 
            {
              Asignation RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_definition",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // optional_increment ::= variable_statement 
            {
              Asignation RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignation asign = (Asignation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = asign;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_increment",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // optional_increment ::= 
            {
              Asignation RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_increment",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // while_block ::= while_statement LLAVE_L internal_block LLAVE_R 
            {
              Object RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		MutableValue mut = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Executable> list = (List<Executable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                WhileStmt stmt = new WhileStmt();
                stmt.setCondition(mut);
                stmt.setExecutables(list);
                project.getData().add(stmt);
                executablesList = new ArrayList();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // while_statement ::= WHILE PARENTESIS_L condition PARENTESIS_R 
            {
              MutableValue RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MutableValue c = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // do_while_block ::= DO LLAVE_L internal_block LLAVE_R while_statement DOT_COMA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Executable> list = (List<Executable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MutableValue mut = (MutableValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                DoWhileStmt stmt = new DoWhileStmt();
                stmt.setCondition(mut);
                stmt.setExecutables(list);
                project.getData().add(stmt);
                executablesList = new ArrayList();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while_block",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
